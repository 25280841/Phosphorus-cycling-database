We should prepare two files: 
1). S0028.PCycDB.blastp. Tabular result generated by DIAMOND or BLAST. Note that the fourth column is the 'query coverage', and DIAMOND or BLAST will not give this value by default.
2). quant.sf. Quantitative file of all ORFs generated by Salmon. Note that the first column is ORF name and the fourth column is the TPM value, which is what we need.

We fisrt make ORF2gene file by following command:
python filter_Generate_ORF2gene.py -s 30 -cov 0 -hit 25 -blast S0028.PCycDB.blastp
And we got 'S0028ORF2Pgene.txt', with the first and second column indicating the ORF and PCG family, respectively.
Note that the parament -cov was set to 0 because we don't need filter result using this parament. If you obtain your tabular result using DIAMOND or BLAST with default paraments, please use 'python filter_Generate_ORF2gene.py -s 30 -cov 25 -hit 0 -blast S0028.PCycDB.blastp'. Also, you need to ensure that the tenth rows of the script, python filter_Generate_ORF2gene.py, was the right path of the 'id2genemap.txt' file.

Next, we extracted the abundance of each PCG using following command:
python Coverage_get.py -i S0028ORF2Pgene.txt -t quant.sf -o S0028.TPM.txt
And we got 'S0028.TPM.txt', with the first and second column indicating PCG family and TPM value (abundance), respectively.
As we have metioned above, the fourth column of 'quant.sf' is the TPM value, the thirteenth rows of the script, Coverage_get.py, should be modify to 'orf2cov[orf.split('\t')[0]]=orf.split('\t')[3]'. This statement tell the script that the first column (0+1) is ORF name and the fourth column (3+1) is the TPM value.

After we processing multiple samples, we can merged all results ended with '.TPM.txt' using python script, merge_metaphlan_tables.py, which is supported by metaphalan2.
merge_metaphlan_tables.py *.TPM.txt > all.result.TPM.txt
